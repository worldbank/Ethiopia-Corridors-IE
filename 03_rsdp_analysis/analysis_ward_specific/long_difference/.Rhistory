# Ethiopia IE
# Master R Script
# In order to source a script as a local job, include this at top of script
# source("~/Documents/Github/Ethiopia-Corridors-IE/Code/_ethiopia_ie_master.R")
# Filepaths --------------------------------------------------------------------
if(Sys.info()[["user"]] == "WB554990") project_file_path <- "C:/Users/wb521633/Dropbox/World Bank/IEs/Ethiopia IE - Merge Budget Data With Shapefile"
if(Sys.info()[["user"]] == "WB521633") project_file_path <- "C:/Users/wb521633/Dropbox/World Bank/IEs/Ethiopia IE"
if(Sys.info()[["user"]] == "robmarty") project_file_path <- "~/Dropbox/World Bank/IEs/Ethiopia IE"
if(Sys.info()[["user"]] == "robmarty") code_file_path <- "~/Documents/Github/Ethiopia-Corridors-IE/Code"
rawdata_file_path <- file.path(project_file_path, "Data", "RawData")
outputs_for_grid <- file.path(project_file_path, "Data", "IntermediateData", "Outputs for Grid")
finaldata_file_path <- file.path(project_file_path, "Data", "FinalData")
figures_file_path <- file.path(project_file_path,"Outputs", "Results", "Figures")
tables_file_path <- file.path(project_file_path,"Outputs", "Results", "Tables")
# Parameters -------------------------------------------------------------------
#### DATASET
# Defines dataset to run analysis on. Either at woreda level, grid level, or
# grid subsample:
# OPTIONS:
# --"dmspols_grid_dataset_nearroad": DMSP-OLS level dataset restricted to cells
#                                    near a road
# --"dmspols_grid_dataset_randomsample": DMSP-OLS level dataset; random sample
# --"woreda_panel_hdx_csa": Woreda level
DATASET_TYPE <- "woreda_panel_hdx_csa"
#DATASET_TYPE <- "dmspols_grid_dataset_nearroad"
#### CHUNK SIZE
# For some functions, we break up the dataset into chunks. These are vectorized
# functions; however, vectorizing across the whole sample (eg, 1km grid across
# all of Ethiopia) would take up too much memory. Consequently, we vectorize
# into manageable chunks. Chunk size differs depending on grid level or woreda
# level.
if(DATASET_TYPE %in% c("woreda_panel_hdx_csa")){
CHUNK_SIZE_DIST_ROADS <- 3
} else{
CHUNK_SIZE_DIST_ROADS <- 1250
}
#### YEAR SUBSETS
road_year <- list(all = 1996:2016,
dmspols = 1996:2012,
viirs = 2013:2016,
phase1 = 1997:2002, # 1997:2002
phase2 = 2003:2007, # 2002:2007
phase3 = 2008:2010, # 2007:2010
phase4 = 2011:2016) # 2010:2015
# Parameters for Grid Analysis
MCCORS_DIST_ROADS <- 1
TYPE <- c("DMSPOLS") # globcover, DMSPOLS
UTM_ETH <- '+init=epsg:20138'
DIST_THRESH <- 2
GRID_DATASET <- grepl("grid", DATASET_TYPE)
# Packages ---------------------------------------------------------------------
library(rgdal)
library(raster)
library(velox)
library(dplyr)
library(rgeos)
library(parallel)
library(pbmcapply)
library(data.table)
library(haven)
library(spex)
library(sf)
library(tidyr)
library(lfe)
library(reshape)
library(dplyr)
library(tibble)
library(ggplot2)
library(data.table)
library(coefplot)
library(stringr)
library(spdep)
library(doBy)
library(stargazer)
library(scales)
library(rasterVis)
library(ggpubr)
library(readr)
library(gdistance)
source("https://raw.githubusercontent.com/ramarty/fast-functions/master/R/functions_in_chunks.R")
# Common Functions -------------------------------------------------------------
lm_confint_tidy <- function(lm, years_since_variable){
lm_confint <- confint(lm) %>%
as.data.frame
names(lm_confint) <- c("p025", "p975")
lm_confint$b <- (lm_confint$p025 + lm_confint$p975)/2
lm_confint$variable <- row.names(lm_confint)
lm_confint <- lm_confint[!grepl("cluster_id)|year)|Intercept)", lm_confint$variable),]
lm_confint$years_since_improved <- gsub(years_since_variable, "", lm_confint$variable) %>% as.numeric
return(lm_confint)
}
lm_post_confint_tidy <- function(lm){
lm_confint <- confint(lm) %>%
as.data.frame
names(lm_confint) <- c("p025", "p975")
lm_confint$b <- (lm_confint$p025 + lm_confint$p975)/2
lm_confint$variable <- row.names(lm_confint)
lm_confint$tvalue <- summary(lm)$coefficients[,3] %>% as.vector()
lm_confint$pvalue <- summary(lm)$coefficients[,4] %>% as.vector()
return(lm_confint)
}
pause_gc <- function(GRID_DATASET){
if(GRID_DATASET){
Sys.sleep(1)
gc()
Sys.sleep(1)
gc()
Sys.sleep(1)
gc()
Sys.sleep(1)
}
return(NULL)
}
# Run Scripts ------------------------------------------------------------------
##### Extract Data to Grids
if(F){
grid_scripts <- c("02a_extract_gadm.R",
#"02b_extract_ndvi.R",
#"02b_extract_viirs.R",
"02c_extract_distance_improved_roads_by_speedlimit_after.R",
#"02c_extract_distance_improved_roads_by_speedlimit_before.R",
#"02c_extract_distance_roads_by_phase.R",
#"02c_extract_distance_roads_by_speedlimit.R",
"02d_distance_cities.R",
"02e_extract_globcover.R",
"02f_extract_dmspols_intercalibrated_zhang2016_method.R",
"04b_merge_datasets_dmspols.R",
"05_create_variables_for_analysis.R")
for(script_i in grid_scripts){
print(paste(script_i, "----------------------------------------------------"))
source(file.path(code_file_path, "create_clean_datasets", "02_create_gridded_datasets", script_i))
}
}
# Number of Projects Near
control_vars <- "+ temp_avg + precipitation"
# Load Data --------------------------------------------------------------------
data <- readRDS(file.path(finaldata_file_path, DATASET_TYPE, "merged_datasets", "grid_data_clean_all.Rds"))
#### Add variable
data$road_length_X_speed <- data$road_length_10 * 10 +
data$road_length_15 * 15 +
data$road_length_20 * 20 +
data$road_length_25 * 25 +
data$road_length_30 * 30 +
data$road_length_35 * 35 +
data$road_length_45 * 45 +
data$road_length_50 * 50 +
data$road_length_70 * 70 +
data$road_length_120 * 120
data_dmspols <- data %>%
filter(year %in% c(1996, 2012)) %>%
mutate(endline = as.numeric(year %in% 2012))
data_viirs <- data %>%
filter(year %in% c(2013, 2016)) %>%
mutate(endline = as.numeric(year %in% 2016))
data_full <- data %>%
filter(year %in% c(1996, 2016)) %>%
mutate(endline = as.numeric(year %in% 2016))
results_df <- data.frame(NULL)
counter <- 1
for(dv in c("viirs_mean_2",
"viirs_mean_6",
"viirs_mean_ihs",
"dmspols_zhang_ihs",
"dmspols_zhang_2",
"dmspols_zhang_6",
"globcover_urban",
"globcover_cropland",
"ndvi",
"ndvi_cropland")){
for(iv in c("road_length_10over",
"road_length_15over",
"road_length_20over",
"road_length_25over",
"road_length_30over",
"road_length_35over",
"road_length_45over",
"road_length_50over",
"road_length_70over",
"road_length_120over",
"road_length_X_speed")){
for(iv_suffix in c("", "_area", "_neigh", "_neigh_area", "_neigh_withi", "_neigh_withi_area")){
for(addis_dist in c("All", "Far")){
## Grab dataset
if (grepl("dmsp", dv)){
data_temp <- data_dmspols
} else if (grepl("viirs", dv)){
data_temp <- data_viirs
} else {
data_temp <- data_full
}
## Subset to Far from Addis
if(addis_dist %in% "Far"){
data_temp <- data_temp[data_temp$far_addis %in% 1,]
}
## _area doesn't exist so add
if(iv_suffix %in% "_area"){
data_temp[[paste0(iv, "_area")]] <- data_temp[[iv]] / data_temp$Area
}
data_temp$road_var     <- log(data_temp[[paste0(iv, iv_suffix)]]+1)
data_temp$road_var_end <- data_temp$road_var * data_temp$endline
IVs <- "road_var + road_var_end"
IVs_base <- "road_var + road_var_end + road_var_end*dmspols_1996_group_woreda - dmspols_1996_group_woreda"
#### Level
f <- as.formula(paste(dv, " ~ ", IVs, control_vars, "| uid + year | 0 | uid"))
lm <- felm(f, data=data_temp) %>%
lm_post_confint_tidy %>%
filter(variable != "temp_avg",
variable != "precipitation") %>%
mutate(dv = dv,
iv = iv,
addis_dist = addis_dist,
iv_suffix = iv_suffix,
lm_type = "level")
#### Base
f_base <- as.formula(paste(dv, " ~ ", IVs_base, control_vars, "| uid + year | 0 | uid"))
lm_base <- felm(f_base, data=data_temp) %>%
lm_post_confint_tidy %>%
filter(variable != "temp_avg",
variable != "precipitation") %>%
mutate(dv = dv,
iv = iv,
addis_dist = addis_dist,
iv_suffix = iv_suffix,
lm_type = "ntl_base")
results_df <- bind_rows(results_df, lm)
results_df <- bind_rows(results_df, lm_base)
if((counter %% 10) == 0) print(counter)
counter <- counter + 1
}
}
}
}
saveRDS(results_df, file.path(finaldata_file_path, DATASET_TYPE, "results", "long_diff.Rds"))
# "road_length_X_speed",
addis_dist <- "All"
iv_suffix  <- ""
type <- "length_over"
lm_type <- "ntl_base"
HEIGHT <- 7
WIDTH = 14
for(addis_dist in c("All", "Far")){
for(iv_suffix in c("", "_area", "_neigh", "_neigh_area", "_neigh_withi", "_neigh_withi_area")){
#for(type in c("length_over", "length_X_speed")){
for(lm_type in c("level", "ntl_base")){
results_df <- readRDS(file.path(finaldata_file_path, DATASET_TYPE, "results", "long_diff.Rds"))
#### Exclude variables always
results_df <- results_df[!(results_df$iv %in% c(
"road_length_10over",
"road_length_15over",
"road_length_20over",
"road_length_70over",
"road_length_120over")),]
#### DVs to Use
results_df <- results_df[results_df$dv %in% c("dmspols_zhang_ihs",
"dmspols_zhang_2",
"viirs_mean_ihs",
"viirs_mean_2",
"globcover_cropland",
"globcover_urban",
"ndvi",
"ndvi_cropland"),]
#### Subset Addis Type
results_df <- results_df[results_df$addis_dist %in% addis_dist,]
results_df <- results_df[results_df$iv_suffix %in% iv_suffix,]
results_df <- results_df[results_df$lm_type %in% lm_type,]
#### Subset Type
#if(type %in% "length_over"){
#  results_df <- results_df[!(results_df$iv %in% "road_length_X_speed"),]
#  HEIGHT = 4
#  WIDTH = 14
#} else{
#  results_df <- results_df[(results_df$iv %in% "road_length_X_speed"),]
#  HEIGHT = 1.5
#  WIDTH = 14
#}
#### Rename Variable Type
results_df$variable[results_df$variable %in% "road_var"] <- "log(Var)"
results_df$variable[results_df$variable %in% "road_var_end"] <- "log(Var) X End"
results_df$variable[results_df$variable %in% "road_var_end:dmspols_1996_group_woreda2"] <- "log(Var) X End X NTL Low"
results_df$variable[results_df$variable %in% "road_var_end:dmspols_1996_group_woreda3"] <- "log(Var) X End X NTL High"
results_df$variable <- results_df$variable %>% factor(c("log(Var)",
"log(Var) X End",
"log(Var) X End X NTL Low",
"log(Var) X End X NTL High") %>% rev())
#### Rename p-value group
results_df$pvalue_5p <- ifelse(results_df$pvalue < 0.05, "Sig 5% Level", "Insign.")
results_df$pvalue_5p[is.na(results_df$pvalue_5p)] <- "Insign."
#### Rename Dependent variables
results_df$dv[results_df$dv %in% "viirs_mean_ihs"] <- "VIIRS Mean (IHS)"
results_df$dv[results_df$dv %in% "viirs_median_ihs"] <- "VIIRS Median (IHS)"
results_df$dv[results_df$dv %in% "viirs_max_ihs"] <- "VIIRS Max (IHS)"
results_df$dv[results_df$dv %in% "viirs_mean_2"] <- "VIIRS > 2"
results_df$dv[results_df$dv %in% "viirs_mean_6"] <- "VIIRS > 6"
results_df$dv[results_df$dv %in% "ndvi_cropland"] <- "NDVI - Cropland Area"
results_df$dv[results_df$dv %in% "ndvi"] <- "NDVI"
results_df$dv[results_df$dv %in% "globcover_urban"] <- "Urban"
results_df$dv[results_df$dv %in% "globcover_cropland"] <- "Cropland"
results_df$dv[results_df$dv %in% "dmspols_zhang_ihs"] <- "DMSP-OLS (IHS)"
results_df$dv[results_df$dv %in% "dmspols_zhang_6"] <- "DMSPOLS > 6"
results_df$dv[results_df$dv %in% "dmspols_zhang_2"] <- "DMSPOLS > 2"
results_df$dv <- results_df$dv %>% factor(levels = c("DMSP-OLS (IHS)",
"DMSPOLS > 2",
"VIIRS Mean (IHS)",
"VIIRS > 2",
"Urban",
"Cropland",
"NDVI",
"NDVI - Cropland Area"))
results_df$iv[results_df$iv %in% "road_length_25over"] <- "Length >= 25km/hr"
results_df$iv[results_df$iv %in% "road_length_30over"] <- "Length >= 30km/hr"
results_df$iv[results_df$iv %in% "road_length_35over"] <- "Length >= 35km/hr"
results_df$iv[results_df$iv %in% "road_length_45over"] <- "Length >= 45km/hr"
results_df$iv[results_df$iv %in% "road_length_50over"] <- "Length >= 50km/hr"
results_df$iv[results_df$iv %in% "road_length_70over"] <- "Length >= 70km/hr"
results_df$iv[results_df$iv %in% "road_length_120over"] <- "Length >= 120km/hr"
results_df$iv[results_df$iv %in% "road_length_X_speed"] <- "Sum: Length X Speed"
p_list <- lapply(1:2, function(i){
if(i == 1) data <- results_df[!(results_df$iv %in% "Sum: Length X Speed"),]
if(i == 2) data <- results_df[(results_df$iv %in% "Sum: Length X Speed"),]
ggplot(data,
aes(ymin = p025,
ymax = p975,
y=b,
pch=variable,
linetype=variable,
color=pvalue_5p,
x = iv)) +
geom_linerange(position = position_dodge(width = 0.5)) +
geom_point(position = position_dodge(width = 0.5)) +
scale_color_manual(values=c("black", "red")) +
coord_flip() +
geom_hline(yintercept = 0, alpha=1, color="gray50") +
labs(x="", y="",color="") +
scale_y_continuous(breaks = trans_breaks(identity, identity, n = 4)) +
guides(linetype = guide_legend(reverse=T),
pch = guide_legend(reverse=T)) +
theme(axis.text.x = element_text(size= 7, angle = 0)) +
facet_wrap(~dv,
scales = "free_x",
nrow = 1)
})
p <- ggarrange(p_list[[1]],
p_list[[2]],
common.legend = T,
ncol = 1,
heights = c(5,1.5),
legend = "right")
ggsave(p, filename = file.path(figures_file_path, paste0("results_longdiff_addisDist",addis_dist,"_iv_suffix",iv_suffix,"_lmType",lm_type,".png")),
height = HEIGHT,
width = WIDTH)
print(paste0("results_longdiff_addisDist",addis_dist,"_iv_suffix",iv_suffix,"_lmType",lm_type,".png"))
}
}
}
#}
